import { assert, test } from "vitest";

import { runScenario, dhtSync } from '@holochain/tryorama';
import { ActionHash, Record } from '@holochain/client';
import { decode } from '@msgpack/msgpack';
import { EntryRecord } from '@holochain-open-dev/utils';
import { toPromise } from '@holochain-open-dev/stores';

import { setup } from './common.js';

{{#if (ne from_referenceable.hash_type "AgentPubKey")}}
import { {{pascal_case from_referenceable.name}} } from '../../../../ui/src/{{dna_role_name}}/{{coordinator_zome_manifest.name}}/types.js';
import { sample{{pascal_case from_referenceable.name}} } from '../../../../ui/src/{{dna_role_name}}/{{coordinator_zome_manifest.name}}/mocks.js';
{{/if}}
{{#if (ne to_referenceable.hash_type "AgentPubKey")}}
import { {{pascal_case to_referenceable.name}} } from '../../../../ui/src/{{dna_role_name}}/{{coordinator_zome_manifest.name}}/types.js';
import { {{pascal_case to_referenceable.name}} } from '../../../../ui/src/{{dna_role_name}}/{{coordinator_zome_manifest.name}}/mocks.js';
{{/if}}

test('link a {{pascal_case from_referenceable.name}} to a {{pascal_case to_referenceable.name}}', async () => {
  await runScenario(async scenario => {
    const { alice, bob } = await setup(scenario);

{{#if (eq from_referenceable.hash_type "AgentPubKey")}}
    const baseAddress = alice.player.agentPubKey;
{{else}}
    const baseRecord: EntryRecord<{{pascal_case from_referenceable.name}}> = await alice.store.client.create{{pascal_case from_referenceable.name}}(await sample{{pascal_case from_referenceable.name}}(alice.store.client));
  {{#if (eq from_referenceable.hash_type "EntryHash")}}
    const baseAddress = baseRecord.entryHash;
  {{else}}
    const baseAddress = baseRecord.actionHash;
  {{/if}}
{{/if}}
{{#if (eq to_referenceable.hash_type "AgentPubKey")}}
    const targetAddress = alice.player.agentPubKey;
{{else}}
    const targetRecord: EntryRecord<{{pascal_case to_referenceable.name}}> = await alice.store.client.create{{pascal_case to_referenceable.name}}(await sample{{pascal_case to_referenceable.name}}(alice.store.client));
  {{#if (eq to_referenceable.hash_type "EntryHash")}}
    const targetAddress = targetRecord.entryHash;
  {{else}}
    const targetAddress = targetRecord.actionHash;
  {{/if}}
{{/if}}

    // Bob gets the links, should be empty
    let linksOutput = await toPromise(bob.store.{{camel_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}.get(baseAddress));
    assert.equal(linksOutput.length, 0);

    // Alice creates a link from {{pascal_case from_referenceable.name}} to {{pascal_case to_referenceable.name}}
    await alice.store.client.add{{pascal_case to_referenceable.name}}For{{pascal_case from_referenceable.name}}(baseAddress, targetAddress);
    
    // Wait for the created entry to be propagated to the other node.
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );
    
    // Bob gets the links again
    linksOutput = await toPromise(bob.store.{{camel_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}.get(baseAddress));
    assert.equal(linksOutput.length, 1);
{{#if (ne to_referenceable.hash_type "AgentPubKey")}}
    assert.deepEqual(targetRecord.{{#if (eq to_referenceable.hash_type "ActionHash")}}actionHash{{else}}entryHash{{/if}}, linksOutput[0]);
{{/if}}

{{#if bidireccional}}
    // Bob gets the links in the inverse direction
    linksOutput = await toPromise(bob.store.{{camel_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}.get(targetAddress));
    assert.equal(linksOutput.length, 1);
  {{#if (ne from_referenceable.hash_type "AgentPubKey")}}
    assert.deepEqual(baseRecord.{{#if (eq from_referenceable.hash_type "ActionHash")}}actionHash{{else}}entryHash{{/if}}, linksOutput[0]);
  {{/if}}
{{/if}}

{{#if delete}}
    await alice.store.client.remove{{pascal_case to_referenceable.name}}For{{pascal_case from_referenceable.name}}(baseAddress, targetAddress);
    
    // Wait for the created entry to be propagated to the other node.
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );

    // Bob gets the links again
    linksOutput = await toPromise(bob.store.{{camel_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}.get(baseAddress));
    assert.equal(linksOutput.length, 0);

  {{#if bidireccional}}
    // Bob gets the links in the inverse direction
    linksOutput = await toPromise(bob.store.{{camel_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}.get(targetAddress));
    assert.equal(linksOutput.length, 0);
  {{/if}}

{{/if}}
  });
});

