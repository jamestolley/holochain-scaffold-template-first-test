import { {{pascal_case entry_type.name}} } from '../../../ui/src/{{dna_role_name}}/{{coordinator_zome_manifest.name}}/types.js';

{{previous_file_content}}

export async function sample{{pascal_case entry_type.name}}(client: {{pascal_case coordinator_zome_manifest.name}}Client, partial{{pascal_case entry_type.name}}: Partial<{{pascal_case entry_type.name}}> = {}): Promise<{{ pascal_case entry_type.name }}> {
    return {
        ...{
{{#each entry_type.fields}}
  {{#if linked_from}}
    {{#if (ne linked_from.hash_type "AgentPubKey")}}
      {{#if (eq cardinality "vector")}}
        {{#if (eq (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
          {{field_name}}: [],
        {{else}}
          {{#if (eq linked_from.hash_type "ActionHash")}}
          {{field_name}}: partial{{pascal_case ../entry_type.name}}.{{field_name}} || [(await create{{pascal_case linked_from.name}}(client)).actionHash],
          {{else}}
          {{field_name}}: partial{{pascal_case ../entry_type.name}}.{{field_name}} || [(await create{{pascal_case linked_from.name}}(client)).entryHash],
          {{/if}}
        {{/if}}
      {{else}}
        {{#if (eq (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
          {{field_name}}: undefined,
        {{else}}
	  {{#if (eq linked_from.hash_type "ActionHash")}}
          {{field_name}}: partial{{pascal_case ../entry_type.name}}.{{field_name}} || (await create{{pascal_case linked_from.name}}(client)).actionHash,
          {{else}}
          {{field_name}}: partial{{pascal_case entry_type.name}}.{{field_name}} || (await create{{pascal_case linked_from.name}}(client)).entryHash,
          {{/if}}
        {{/if}}
      {{/if}}
    {{else}}
          {{field_name}}: client.client.myPubKey,
    {{/if}}
  {{else}}
      {{#if (eq cardinality "vector")}}
          {{field_name}}: [{{> (concat field_type.type "/sample-js") field_type=field_type}}],
      {{else}}
          {{field_name}}: {{> (concat field_type.type "/sample-js") field_type=field_type}},
      {{/if}}
  {{/if}}
{{/each}}
        },
        ...partial{{pascal_case entry_type.name}}
    };
}

export async function create{{pascal_case entry_type.name}}(client: {{pascal_case coordinator_zome_manifest.name}}Client, {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} | undefined): Promise<EntryRecord<{{pascal_case entry_type.name}}>> {
  return client.create{{pascal_case entry_type.name}}({{camel_case entry_type.name}} || await sample{{pascal_case entry_type.name}}(client));
}

